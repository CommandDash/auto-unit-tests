// Mocks generated by Mockito 5.4.2 from annotations
// in pic_connect/test/features/add/add_post_bloc/onPublishAsStoryMomentEventHandler.welltested_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pic_connect/domain/models/failure.dart' as _i7;
import 'package:pic_connect/domain/models/user.dart' as _i8;
import 'package:pic_connect/domain/repository/auth_repository.dart' as _i2;
import 'package:pic_connect/domain/repository/post_repository.dart' as _i4;
import 'package:pic_connect/domain/usecase/get_user_details_use_case.dart'
    as _i5;
import 'package:pic_connect/domain/usecase/publish_post_use_case.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthRepository_0 extends _i1.SmartFake
    implements _i2.AuthRepository {
  _FakeAuthRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostRepository_2 extends _i1.SmartFake
    implements _i4.PostRepository {
  _FakePostRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetUserDetailsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserDetailsUseCase extends _i1.Mock
    implements _i5.GetUserDetailsUseCase {
  MockGetUserDetailsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get authRepository => (super.noSuchMethod(
        Invocation.getter(#authRepository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#authRepository),
        ),
      ) as _i2.AuthRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.UserBO>> call(
          _i5.GetUserDetailsParams? param) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [param],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, _i8.UserBO>>.value(
            _FakeEither_1<_i7.Failure, _i8.UserBO>(
          this,
          Invocation.method(
            #call,
            [param],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i8.UserBO>>);
}

/// A class which mocks [PublishPostUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockPublishPostUseCase extends _i1.Mock
    implements _i9.PublishPostUseCase {
  MockPublishPostUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get authRepository => (super.noSuchMethod(
        Invocation.getter(#authRepository),
        returnValue: _FakeAuthRepository_0(
          this,
          Invocation.getter(#authRepository),
        ),
      ) as _i2.AuthRepository);
  @override
  _i4.PostRepository get postRepository => (super.noSuchMethod(
        Invocation.getter(#postRepository),
        returnValue: _FakePostRepository_2(
          this,
          Invocation.getter(#postRepository),
        ),
      ) as _i4.PostRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, bool>> call(
          _i9.PublishPostUseParams? param) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [param],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, bool>>.value(
            _FakeEither_1<_i7.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [param],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, bool>>);
}
